/*--------------------------------------------------------------------------------*/
/* Servicio: getConsumosTasadosVozSMS                                             */
/* Autor(es): Alex Padilla                                                        */
/* Doc: https://docuit.personal.corp/display/DMB/getConsumosTasadosVozSMS_RTPAIS  */
/*--------------------------------------------------------------------------------*/
#if defined(__STDC__)||defined(__cplusplus)
void getConsumosTasadosVozSMS(TPSVCINFO *msg)
#else
void getConsumosTasadosVozSMS(msg)
TPSVCINFO *msg;
#endif
{
    /*--- Local Oracle Variables Definition ---*/
    char serviceName[]="getConsumosTasadosVozSMS";
    
    EXEC SQL BEGIN DECLARE SECTION;
    char tid[100+1] = "";
    //IN
    sql_cursor cursorVoz;
    sql_cursor cursorSms;
    long lnumContrato=0L;                   //  NUM_CONTRATO
    long lcustomerId=0L;                    //  CUSTOMER_ID
    char cservicioTipo[] = "";              //  SERVICIO_TIPO
    char cfechaDesde[21+1] = "";		    //	FECHA_DESDE
    char cfechaHasta[21+1] = "";	        //	FECHA_HASTA
    long lcantidadLineas = 0L;              //  CANTIDAD_LINEAS
    long lcantidadPaginas = 0L              //  CANTIDAD_PAGINA
    //OUT                                                       
    char cvozFecha[21+1] = "";                  //  VOZ_FECHA
    long lvozDuracion=0L;			        //  VOZ_DURACION
    float fvozPrecio = 0.0;                 //  VOZ_PRECIO
    char cvozNroDiscado[28+1] = "";             //  VOZ_NRO_DISCADO
    char cvozDestino[15] = "";                //  VOZ_DESTINO
    char cvozSentido[1+1] = "";                //  VOZ_SENTIDO
    char csmsFecha[21+1] = "";                  //  SMS_MMS_FECHA
    long lsmsDuracion=0L;			        //  SMS_MMS_DURACION
    float fsmsPrecio = 0.0;                 //  SMS_MMS_PRECIO
    char csmsNroDiscado[28+1] = "";             //  SMS_MMS_NRO_DISCADO
    char csmsDestino[15+1] = "";                //  SMS_MMS_DESTINO
    char csmsSentido[1+1] = "";                //  SMS_MMS_SENTIDO
    char csmsTipo[1+1] = "";                   //  SMS_MMS_TIPO
    long nCodeError=0;
    char cDescError[500 + 1]= "";
    short indCodError;
    short indDescError;
    EXEC SQL END DECLARE SECTION;

    /*--- Socket Variables Definition ---*/ 
    errorType error;
    /*--- Local Tuxedo FML Variables Definition ---*/
    FBFR32   *fdata;
    FLDLEN32 len;        
    FBFR32 *fdataOut;

    /*--- Init Service with no errors ---*/
    error.exist = FALSE;
    /*--- Local Tuxedo FML Variables Definition and init TRANS_ID ---*/
    fdata=(FBFR32 *)msg->data;
    strcpy(tid, getTID(fdata));
    if ( !error.exist && ((fdataOut=(FBFR32 *)tpalloc("FML32", NULL, 1024*1000)) == NULL) ) {
        loadError("Falla de tpalloc", ERR_TECNICO, (char *)fdata);
        writeLog_STR(ERRORMSG,serviceName, Fstrerror32(Ferror32), Ferror32, tid);
        tpreturn(TPFAIL, 0, (char *)fdata, 0L, 0);
    }
    Finit32(fdataOut, Fsizeof32(fdataOut));
    if (!error.exist && Fchg32((FBFR32 *)fdataOut, TRANS_ID , 0, (char *)&tid, 0L) == -1) {
        setErrMsg(&error, ERR_TECNICO, "srvRTPAIS(getConsumosTasadosVozSMS): Falla de Fchg-TRANS_ID");
    }
    /*--- Read data from buffer ---*/
    if ( !error.exist && validateFMLRequest(fdata, 7, NUM_CONTRATO, CUSTOMER_ID, SERVICIO_TIPO, FECHA_DESDE, FECHA_HASTA, CANTIDAD_LINEAS, CANTIDAD_PAGINA) ) {
        setErrMsg(&error, ERR_VAL_PARAMS, "srvRTPAIS(getConsumosTasadosVozSMS): Faltan parametros");
    }
    len=sizeof(lnumContrato);
    if (!error.exist && Fget32(fdata, NUM_CONTRATO, 0, (char *)&lnumContrato, &len) == -1) {
        setErrMsg(&error, ERR_TECNICO, "srvRTPAIS(getConsumosTasadosVozSMS): Falla de Fget-NUM_CONTRATO");
    }
    len=sizeof(lcustomerId);
    if (!error.exist && Fget32(fdata, CUSTOMER_ID, 0, (char *)&lcustomerId, &len) == -1) {
        setErrMsg(&error, ERR_TECNICO, "srvRTPAIS(getConsumosTasadosVozSMS): Falla de Fget-CUSTOMER_ID");
    }
    len=sizeof(cservicioTipo);
    if (!error.exist && Fget32(fdata, SERVICIO_TIPO, 0, (char *)&cservicioTipo, &len) == -1) {
        setErrMsg(&error, ERR_TECNICO, "srvRTPAIS(getConsumosTasadosVozSMS): Falla de Fget-SERVICIO_TIPO");
    }
    len=sizeof(cfechaDesde);
    if (!error.exist && Fget32(fdata, FECHA_DESDE, 0, (char *)&cfechaDesde, &len) == -1) {
        setErrMsg(&error, ERR_TECNICO, "srvRTPAIS(getConsumosTasadosVozSMS): Falla de Fget-FECHA_DESDE");
    }
    len=sizeof(cfechaHasta);
    if (!error.exist && Fget32(fdata, FECHA_HASTA, 0, (char *)&cfechaHasta, &len) == -1) {
        setErrMsg(&error, ERR_TECNICO, "srvRTPAIS(getConsumosTasadosVozSMS): Falla de Fget-FECHA_HASTA");
    }
    len=sizeof(lcantidadLineas);
    if (!error.exist && Fget32(fdata, CANTIDAD_LINEAS, 0, (char *)&lcantidadLineas, &len) == -1) {
        setErrMsg(&error, ERR_TECNICO, "srvRTPAIS(getConsumosTasadosVozSMS): Falla de Fget-CANTIDAD_LINEAS");
    }
    len=sizeof(lcantidadPaginas);
    if (!error.exist && Fget32(fdata, CANTIDAD_PAGINA, 0, (char *)&lcantidadPaginas, &len) == -1) {
        setErrMsg(&error, ERR_TECNICO, "srvRTPAIS(getConsumosTasadosVozSMS): Falla de Fget-CANTIDAD_PAGINA");
    }
    /*--- Service Logic (Before) ---*/
    /*--- Execute Data Base Operation ---*/
    EXEC SQL ALLOCATE :cursorVoz;
    EXEC SQL ALLOCATE :cursorSms; 
    if (!error.exist)
    {
        char buffer[500+1]="";
        sprintf(buffer,"SP - RTPAIS.PKG_CONSUMOS_TAS_WEB.SP_CONSULTAR_TASADOS_WEB");
        writeLog_STR( INFORM, serviceName, buffer, 0, tid );

        EXEC SQL AT :DBName EXECUTE
            DECLARE
                
            BEGIN
    
            RTPAIS.PKG_CONSUMOS_TAS_WEB.SP_CONSULTAR_TASADOS_WEB(
            :lnumContrato,
            :lcustomerId,
            :cservicioTipo,
            :cfechaDesde, 
            :cfechaHasta,
            :lcantidadLineas,
            :lcantidadPaginas,
            :cursorVoz,
            :cursorSms,
            :nCodeError:indCodError,
            :cDescError:indDescError);

            END;
        END-EXEC;
    }

    if (!error.exist && sqlca.sqlcode  ) {
        if(sqlca.sqlcode==-3114 || sqlca.sqlcode==-1012 || sqlca.sqlcode==-3113)
        {
            undoConnectBD();
            doConnectBDenc ( globalArgc, globalArgv );
            tpforward (serviceName, (char *)fdata,0,0);
        }
        setErrMsg(&error, ERR_TECNICO, "Falla QUERY-getConsumosTasadosVozSMS(sp_XXXXXXX)");
        writeLog_STR( ERRORMSG, serviceName, sqlca.sqlerrm.sqlerrmc, error.code, tid);
    }

    /* Levantar dos cursores */
    if (!error.exist)
    {
        do {
            // Fetcheo cursorVoz
            EXEC SQL FETCH :cursorVoz INTO :cvozFecha,
            :lvozDuracion,
            :fvozPrecio,
            :cvozNroDiscado,
            :cvozDestino,
            :cvozSentido;	

            // Chequeo Errores
            if (!error.exist && sqlca.sqlcode && sqlca.sqlcode == NO_HAY_REGISTROS)
                break;
            if (!error.exist && sqlca.sqlcode && sqlca.sqlcode != NO_HAY_REGISTROS) {
                setErrMsg(&error, NRO_ERROR_TECNICO, "Error Tecnico - srvRTPAIS(getConsumosTasadosVozSMS): Falla QUERY-Cursor1a");
                writeLog_STR(ERRORMSG,serviceName,sqlca.sqlerrm.sqlerrmc,sqlca.sqlcode, tid);
            }                
            // Populate the buffer with cursorVoz
            fnszAllTrim(cvozFecha);
            if (!error.exist && Fadd32((FBFR32 *)fdataOut, VOZ_FECHA, (char *)&cvozFecha, 0) == -1) {
                setErrMsg(&error, NRO_ERROR_TECNICO, "Error Tecnico - srvRTPAIS(getConsumosTasadosVozSMS): Falla de Fadd-VOZ_FECHA");
            }
            if (!error.exist && Fadd32((FBFR32 *)fdataOut, VOZ_DURACION, (char *)&lvozDuracion, 0) == -1) {
                setErrMsg(&error, NRO_ERROR_TECNICO, "Error Tecnico - srvRTPAIS(getConsumosTasadosVozSMS): Falla de Fadd-VOZ_DURACION");
            }
            if (!error.exist && Fadd32((FBFR32 *)fdataOut, VOZ_PRECIO, (char *)&fvozPrecio, 0) == -1) {
                setErrMsg(&error, NRO_ERROR_TECNICO, "Error Tecnico - srvRTPAIS(getConsumosTasadosVozSMS): Falla de Fadd-VOZ_PRECIO");
            }
            fnszAllTrim(cvozNroDiscado);
            if (!error.exist && Fadd32((FBFR32 *)fdataOut, VOZ_NRO_DISCADO, (char *)&cvozNroDiscado, 0) == -1) {
                setErrMsg(&error, NRO_ERROR_TECNICO, "Error Tecnico - srvRTPAIS(getConsumosTasadosVozSMS): Falla de Fadd-VOZ_NRO_DISCADO");
            }
            fnszAllTrim(cvozDestino);
            if (!error.exist && Fadd32((FBFR32 *)fdataOut, VOZ_DESTINO, (char *)&cvozDestino, 0) == -1) {
                setErrMsg(&error, NRO_ERROR_TECNICO, "Error Tecnico - srvRTPAIS(getConsumosTasadosVozSMS): Falla de Fadd-VOZ_DESTINO");
            }
            fnszAllTrim(cvozSentido);                 
            if (!error.exist && Fadd32((FBFR32 *)fdataOut, VOZ_SENTIDO, (char *)&cvozSentido, 0) == -1) {
                setErrMsg(&error, NRO_ERROR_TECNICO, "Error Tecnico - srvRTPAIS(getConsumosTasadosVozSMS): Falla de Fadd-VOZ_SENTIDO");
            }
            if(Funused32(fdataOut)<1024) 
            {
                loadError("Falla de tpalloc - respuesta SP excede capacidad buffer", ERR_TECNICO, (char *)fdata);
                writeLog_STR(ERRORMSG,serviceName, Fstrerror32(Ferror32), Ferror32, tid);
                tpreturn(TPFAIL, 0, (char *)fdata, 0L, 0);
                break;
            }
        } while(!error.exist);
        error.exist = FALSE;
        if(nCodeError != 66)
        
        do {
            // Fetcheo cursorSms 
            EXEC SQL FETCH :cursorSms INTO :csmsFecha,
            :lsmsDuracion,
            :fsmsPrecio,
            :csmsNroDiscado,
            :csmsDestino,
            :csmsSentido,
            :csmsTipo;
                                        
            // Chequeo Errores
            if (!error.exist && sqlca.sqlcode && sqlca.sqlcode == NO_HAY_REGISTROS)
                break;
            if (!error.exist && sqlca.sqlcode && sqlca.sqlcode != NO_HAY_REGISTROS) {
                setErrMsg(&error, NRO_ERROR_TECNICO, "Error Tecnico - srvRTPAIS(getConsumosTasadosVozSMS): Falla QUERY-Cursor1a");
                writeLog_STR(ERRORMSG,serviceName,sqlca.sqlerrm.sqlerrmc,sqlca.sqlcode, tid);
            }                
            // Populate the buffer with cursorVoz
            fnszAllTrim(csmsFecha);
            if (!error.exist && Fadd32((FBFR32 *)fdataOut, SMS_MMS_FECHA, (char *)&csmsFecha, 0) == -1) {
                setErrMsg(&error, NRO_ERROR_TECNICO, "Error Tecnico - srvRTPAIS(getConsumosTasadosVozSMS): Falla de Fadd-SMS_MMS_FECHA");
            }
            if (!error.exist && Fadd32((FBFR32 *)fdataOut, SMS_MMS_DURACION, (char *)&lsmsDuracion, 0) == -1) {
                setErrMsg(&error, NRO_ERROR_TECNICO, "Error Tecnico - srvRTPAIS(getConsumosTasadosVozSMS): Falla de Fadd-SMS_MMS_DURACION");
            }
            if (!error.exist && Fadd32((FBFR32 *)fdataOut, SMS_MMS_PRECIO, (char *)&fsmsPrecio, 0) == -1) {
                setErrMsg(&error, NRO_ERROR_TECNICO, "Error Tecnico - srvRTPAIS(getConsumosTasadosVozSMS): Falla de Fadd-SMS_MMS_PRECIO");
            }
            fnszAllTrim(csmsNroDiscado);
            if (!error.exist && Fadd32((FBFR32 *)fdataOut, SMS_MMS_NRO_DISCADO, (char *)&csmsNroDiscado, 0) == -1) {
                setErrMsg(&error, NRO_ERROR_TECNICO, "Error Tecnico - srvRTPAIS(getConsumosTasadosVozSMS): Falla de Fadd-SMS_MMS_NRO_DISCADO");
            }
            fnszAllTrim(csmsDestino);
            if (!error.exist && Fadd32((FBFR32 *)fdataOut, SMS_MMS_DESTINO, (char *)&csmsDestino, 0) == -1) {
                setErrMsg(&error, NRO_ERROR_TECNICO, "Error Tecnico - srvRTPAIS(getConsumosTasadosVozSMS): Falla de Fadd-SMS_MMS_DESTINO");
            }
            fnszAllTrim(csmsSentido);                 
            if (!error.exist && Fadd32((FBFR32 *)fdataOut, SMS_MMS_SENTIDO, (char *)&csmsSentido, 0) == -1) {
                setErrMsg(&error, NRO_ERROR_TECNICO, "Error Tecnico - srvRTPAIS(getConsumosTasadosVozSMS): Falla de Fadd-SMS_MMS_SENTIDO");
            }
            fnszAllTrim(csmsTipo);                 
            if (!error.exist && Fadd32((FBFR32 *)fdataOut, SMS_MMS_TIPO, (char *)&csmsTipo, 0) == -1) {
                setErrMsg(&error, NRO_ERROR_TECNICO, "Error Tecnico - srvRTPAIS(getConsumosTasadosVozSMS): Falla de Fadd-SMS_MMS_TIPO");
            }
            if(Funused32(fdataOut)<1024) 
            {
                loadError("Falla de tpalloc - respuesta SP excede capacidad buffer", ERR_TECNICO, (char *)fdata);
                writeLog_STR(ERRORMSG,serviceName, Fstrerror32(Ferror32), Ferror32, tid);
                tpreturn(TPFAIL, 0, (char *)fdata, 0L, 0);
                break;
            }            
        } while(!error.exist);
        EXEC SQL CLOSE :cursorVoz;
        EXEC SQL CLOSE :cursorSms;
    }
    if(!indCodError) {
        if (!error.exist && Fchg32((FBFR32 *)fdataOut, CODE_ERROR , 0, (char *)&nCodeError, 0L) == -1) {
            setErrMsg(&error, ERR_TECNICO, "srvRTPAIS(getConsumosTasadosRoaming): Falla de Fchg-CODE_ERROR");
        }
    }
    if(!indDescError) {
        fnszAllTrim(cDescError);
        if (Fchg32((FBFR32 *)fdataOut, DESC_ERROR , 0, (char *)cDescError, 0L) == -1) {
            setErrMsg(&error, ERR_TECNICO, "Error Tecnico - srvVMIQuery(getConsumosTasadosRoaming): Falla de Fchg-CODE_ERROR");
        }
    }
    if( error.exist ){
        EXEC SQL AT :DBName ROLLBACK;
        loadError(error.descr, error.code, (char *)fdataOut );
        writeLog_STR( ERRORMSG, serviceName,error.descr,  error.code, tid);
        tpreturn(TPFAIL, 0,(char *)fdataOut, 0L, 0);
    }
    EXEC SQL AT :DBName COMMIT;
    writeLog_STR( INFORM, serviceName, "Operacion exitosa", 0, tid);

    /*--- Deallocate Memory and Return Buffer ---*/
    tpreturn(TPSUCCESS, 0, (char *)fdataOut, 0L, 0);
}